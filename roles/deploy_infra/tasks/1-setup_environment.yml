---

- name: Create a VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ app_name }}_vpc"
    region: "{{ aws_region }}"
    cidr_block: "{{ cidr_block }}"
    tags:
      purpose: techchallenge
    state: present
  register: aws_vpc

- name: Create VPC subnets in two availability zones
  amazon.aws.ec2_vpc_subnet:
    region: "{{ aws_region }}"
    az: "{{ item.az }}"
    vpc_id: "{{ aws_vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    tags: 
      purpose: techchallenge
    state: present
  loop: "{{ aws_availability_zones }}"
  register: aws_vpc_subnets

- name: Save VPN subnet ID for later use
  set_fact:
    vpc_subnets: "{{ aws_vpc_subnets.results }}"

- name: Create deployment security group  # Allow SSH inbound
  amazon.aws.ec2_group:
    name: "{{ app_name }}_app_deployment"
    description: Temporary security group to allow app deployment
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc.vpc.id }}"
    rules:
      - proto: tcp
        cidr_ip: 0.0.0.0/0
        ports: 22
    state: present

- name: Create webservers security group
  amazon.aws.ec2_group:
    name: webservers
    description: Allow inbound web traffic to webservers
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc.vpc.id }}"
    rules:
      - proto: tcp
        cidr_ip: 0.0.0.0/0
        ports:
          - 80
          - 443
    state: present

- name: Create dbservers security group
  amazon.aws.ec2_group:
    name: dbservers
    description: Allow traffic from webservers to dbservers
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc.vpc.id }}"
    rules:
      - proto: tcp
        group_name: webservers
        ports: 5432
    state: present
  register: dbserver_sg
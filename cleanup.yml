---

- name: Destroy TechChallenge AWS components
  hosts: localhost
  connection: local
  gather_facts: False
  environment:
    AWS_ACCESS_KEY_ID: "{{ access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ secret_key }}"

  tasks:

    - name: Delete RDS instance (in background)
      community.aws.rds:
        command: delete
        instance_name: "{{ app_name }}-rds"
        region: "{{ aws_region }}"
        wait: True
        wait_timeout: 1200  # Wait up to 20 minutes
      async: 1200
      poll: 0  # Move on to next task
      register: rds_job

    - name: Get EC2 instance ID
      command: |
        aws ec2 describe-instances
        --filters Name=tag:Name,Values={{ app_name }}
        --query 'Reservations[].Instances[].InstanceId'
        --region {{ aws_region }}
        --output text
      register: ec2_instance

    - name: Terminate EC2 instance
      amazon.aws.ec2:
        instance_ids: "{{ ec2_instance.stdout }}"
        region: "{{ aws_region }}"
        state: absent
      register: ec2_job

    - name: Delete ec2 key
      amazon.aws.ec2_key:
        name: "{{ app_name }}-key"
        region: "{{ aws_region }}"
        state: absent

    - name: Delete load balancer
      amazon.aws.ec2_elb_lb:
        name: "{{ app_name }}-elb"
        region: "{{ aws_region }}"
        state: absent

    - name: Wait for RDS instance to delete (this could take a while)
      async_status:
        jid: "{{ rds_job.ansible_job_id }}"
      register: rds_deployment
      until: rds_deployment.finished
      retries: 200

    - name: Delete RDS subnet groups
      community.aws.rds_subnet_group:
        name: "{{ app_name }}_db_subnet_group"
        region: "{{ aws_region }}"
        state: absent

    - name: Delete snapshot
      community.aws.rds_snapshot:
        db_snapshot_identifier: "{{ app_name }}-rds"
        region: "{{ aws_region }}"
        state: absent

    - name: Get VPC ID
      command: |
        aws ec2 describe-vpcs
        --filters Name=tag:purpose,Values=techchallenge
        --query 'Vpcs[].VpcId'
        --region {{ aws_region }}
        --output text
      register: vpc_id

    - name: print
      debug: msg={{ vpc_id.stdout }}

    - name: Get VPC route table ID
      command: |
        aws ec2 describe-route-tables 
        --filters Name=vpc-id,Values=vpc-02e833f4eec4bed23
        --query 'RouteTables[].RouteTableId'
        --region {{ aws_region }}
        --output text
      register: route_table

    - name: Remove VPC subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_id.stdout }}"
        region: "{{ aws_region }}"
        cidr: "{{ item.cidr }}"
        state: absent
      loop: "{{ aws_availability_zones }}"

    - name: Remove VPC IGW
      community.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_id.stdout }}"
        region: "{{ aws_region }}"
        state: absent
      register: igw

    - name: Purge security group rules
      amazon.aws.ec2_group:
        name: "{{ item }}"
        description: To be deleted
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id.stdout }}"
        purge_rules: True
        state: present
      loop:
        - dbservers
        - app_internal
        - web_inbound

    - name: Delete security groups
      amazon.aws.ec2_group:
        name: "{{ item }}"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id.stdout }}"
        state: absent
      loop:
        - dbservers
        - web_inbound
        - app_internal

    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ app_name }}_vpc"
        region: "{{ aws_region }}"
        cidr_block: "{{ cidr_block }}"
        state: absent
